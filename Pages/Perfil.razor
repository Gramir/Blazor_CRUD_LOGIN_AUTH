@page "/perfil"
@attribute [Authorize]
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Tarea6.Servicios.UsuarioServicio servicios
@inject IJSRuntime Js
@inject NavigationManager nav

<div class="col-5 bg-light m-2 justify-content-start">
    <div class="p-3 mb-3 bg-primary text-white text-center">Editar Perfil</div>
    <EditForm Model="@editarUsuario">
        <div class="form-group">
            <label>Cambiar Nombre</label>
            <input type="text" id="nombre" class="form-control" @bind="@usu.Nombre" />
        </div>
        <div class="form-group">
            <label>Cambiar Contraseña</label>
            <input type="password" id="contraseña" class="form-control" @bind="@usu.Clave" />
        </div>
        <div class="form-group">
            <label>Cambiar tu color favorito</label>
            <input type="color" class="form-control" @bind="@usu.Color" />
        </div>
        <div class="text-center p-3 mb-3">
            <button class="btn btn-info" @onclick="Actualizar"> Guardar Cambios</button>
        </div>
    </EditForm>
</div>
@code {

    Tarea6.Models.Usuario editarUsuario = new Tarea6.Models.Usuario();
    Tarea6.Models.Usuario usu = new Tarea6.Models.Usuario();
    List<Tarea6.Models.Usuario> Usuarios = new List<Tarea6.Models.Usuario>();
    private Blazored.SessionStorage.ISessionStorageService _sessionStorage;
    string corr;

    protected override async Task OnInitializedAsync()
    {
        _sessionStorage = sessionStorage;
        await RefrescarUsuario();
    }

    private async Task RefrescarUsuario()
    {
        Usuarios = await servicios.GetUsuariosAsync();
        await FillUser();
    }

    private async Task FillUser()
    {
        corr = await sessionStorage.GetItemAsync<string>("correo");
        usu = Usuarios.FirstOrDefault(u => u.Correo.Equals(corr));
        if (usu == null)
        {
            await Js.InvokeVoidAsync("Reload");
        }
        else
        {
            editarUsuario.Id = usu.Id;
            editarUsuario.Nombre = usu.Nombre;
            editarUsuario.Clave = usu.Clave;
            editarUsuario.Color = usu.Color;
            editarUsuario.Correo = usu.Correo;
        }
    }

    private async Task Actualizar()
    {

        await servicios.EditarUsuario(editarUsuario);
        await Js.InvokeAsync<bool>("confirm", "Perfil Actualizado!");
        nav.NavigateTo("/");
    }


}
